syntax = "proto3";

package raft;

// Raft RPC service definition
service RaftService {
    // RequestVote RPC - used during leader election
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    
    // AppendEntries RPC - used for log replication and heartbeats
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    
    // InstallSnapshot RPC - used for log compaction
    rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
    
    // Client command interface
    rpc SubmitCommand(SubmitCommandRequest) returns (SubmitCommandResponse);
    
    // Cluster status and management
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
}

// RequestVote RPC messages
message RequestVoteRequest {
    uint64 term = 1;              // candidate's term
    string candidate_id = 2;      // candidate requesting vote
    uint64 last_log_index = 3;    // index of candidate's last log entry
    uint64 last_log_term = 4;     // term of candidate's last log entry
}

message RequestVoteResponse {
    uint64 term = 1;              // current term, for candidate to update itself
    bool vote_granted = 2;        // true means candidate received vote
}

// AppendEntries RPC messages
message AppendEntriesRequest {
    uint64 term = 1;              // leader's term
    string leader_id = 2;         // so follower can redirect clients
    uint64 prev_log_index = 3;    // index of log entry immediately preceding new ones
    uint64 prev_log_term = 4;     // term of prev_log_index entry
    repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
    uint64 leader_commit = 6;     // leader's commit_index
}

message AppendEntriesResponse {
    uint64 term = 1;              // current term, for leader to update itself
    bool success = 2;             // true if follower contained entry matching prev_log_index and prev_log_term
    uint64 conflict_index = 3;    // index of first conflicting entry (for optimization)
    uint64 conflict_term = 4;     // term of conflicting entry (for optimization)
}

// InstallSnapshot RPC messages
message InstallSnapshotRequest {
    uint64 term = 1;              // leader's term
    string leader_id = 2;         // so follower can redirect clients
    uint64 last_included_index = 3; // the snapshot replaces all entries up through and including this index
    uint64 last_included_term = 4;  // term of last_included_index
    uint64 offset = 5;            // byte offset where chunk is positioned in the snapshot file
    bytes data = 6;               // raw bytes of the snapshot chunk, starting at offset
    bool done = 7;                // true if this is the last chunk
}

message InstallSnapshotResponse {
    uint64 term = 1;              // current term, for leader to update itself
}

// Log entry structure
message LogEntry {
    uint64 index = 1;             // log entry index
    uint64 term = 2;              // term when entry was received by leader
    EntryType entry_type = 3;     // type of entry
    bytes data = 4;               // serialized command data
    string client_id = 5;         // client that submitted the command
    uint64 sequence_number = 6;   // client sequence number
}

enum EntryType {
    COMMAND = 0;                  // regular state machine command
    CONFIGURATION = 1;            // cluster configuration change
    NO_OP = 2;                   // no-operation (used by new leaders)
}

// Client command interface
message SubmitCommandRequest {
    bytes command = 1;            // serialized command
    string client_id = 2;         // client identifier
    uint64 sequence_number = 3;   // client sequence number for deduplication
}

message SubmitCommandResponse {
    bool success = 2;             // true if command was successfully committed
    string error = 3;             // error message if success is false
    bytes result = 4;             // command execution result
    string leader_id = 5;         // current leader ID (for client redirection)
}

// Status and management
message GetStatusRequest {
    // Empty for now
}

message GetStatusResponse {
    NodeState state = 1;          // current node state
    uint64 current_term = 2;      // current term
    string node_id = 3;           // this node's ID
    string leader_id = 4;         // current leader ID (if known)
    uint64 commit_index = 5;      // index of highest log entry known to be committed
    uint64 last_applied = 6;      // index of highest log entry applied to state machine
    uint64 log_length = 7;        // total number of log entries
    repeated string peers = 8;    // list of peer node IDs
}

enum NodeState {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
}

// Node information
message NodeInfo {
    string node_id = 1;           // unique node identifier
    string address = 2;           // network address (host:port)
    bool voting = 3;              // whether this node can vote
}

// Cluster configuration
message ClusterConfig {
    repeated NodeInfo nodes = 1;   // all nodes in the cluster
    uint64 config_index = 2;      // log index where this config was committed
}
